<?php
/**
 * Adapt monitor main file.
 *
 * @file
 *   adapt_monitor.module
 */

include_once 'adapt_monitor.features.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function adapt_monitor_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'adapt_monitor.services.inc',
      'path' => drupal_get_path('module', 'adapt_monitor') . '/includes',
    );
  }
  return NULL;
}

/**
 * Implements hook_menu().
 */
function adapt_monitor_menu() {
  $items = array();

  $items['admin/config/system/adapt-monitor'] = array(
    'title' => 'Adapt monitoring',
    'description' => 'Display monitoring information for drupal sites.',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adapt_monitor_admin_form'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Admin form for monitor functionality.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 *
 * @return mixed
 *   Form array.
 */
function adapt_monitor_admin_form(array $form, array &$form_state) {
  $results = db_select('adapt_monitor', 'a')
    ->fields('a')
    ->execute();
  foreach ($results as $result) {
    $data = unserialize($result->data);
    $form['site_' . $result->sid] = array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['site_' . $result->sid]['info'] = array(
      '#type' => 'item',
      '#title' => '',
      '#markup' => theme(
          'adapt_monitor_info',
          array(
            'title' => $result->title,
            'status' => $result->status,
            'build' => $result->build,
            'version' => $data['core']['drupal']['version'],
          )
      ),
    );
    $form['site_' . $result->sid]['versions'] = array(
      '#type' => 'fieldset',
      '#title' => t('State'),
      '#weight' => 5,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    foreach ($data['contrib'] as $name => $info) {
      $form['site_' . $result->sid]['versions'][$name] = array(
        '#type' => 'markup',
        '#markup' => theme(
          'adapt_monitor_item',
          array(
            'name' => $name,
            'version' => $info['version'],
          )
        ),
      );
    }

  }
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'adapt_monitor') . '/adapt_monitor.css',
  );
  return $form;
}

/**
 * Implements hook_services_resources().
 */
function adapt_monitor_services_resources() {
  return array(
    'adapt_monitor' => array(
      'actions' => array(
        'report' => array(
          'help' => 'Report a site state',
          'callback' => 'adapt_monitor_report',
          'access arguments' => array(TRUE),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'json',
              'description' => 'JSON data with site status information',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_services_authentication().
 */
function adapt_monitor_services_authentication_info() {
  return array(
    'file' => 'includes/adapt_monitor.auth.inc',
    'title' => t('Shared secret authentication'),
    'description' => t('Require a shared secret code before allowing incoming trafic access.'),
    'authenticate_call' => 'adapt_monitor_authenticate_call',
  );
}


/**
 * Endpoint for adapt monitor site status.
 *
 * @param array $data
 *   Array of structured data describing a site state.
 *
 * @return array
 *   Array with status of the request.
 */
function adapt_monitor_report(array $data) {
  if ($data) {
    $result = db_select('adapt_monitor', 'a')
      ->condition('title', $data['site_id'])
      ->fields('a', array('sid', 'build'))
      ->execute()
      ->fetchAssoc();
    $sites = entity_load('site', FALSE, array('title' => $data['site_id']));
    if (!empty($sites)) {
      $site = current($sites);
      $entity_type_name = 'site';
      $site_wrapper = entity_metadata_wrapper($entity_type_name, $site);
      $site_wrapper->field_state->set('1');
      $build = $site_wrapper->field_build_number->value();
      if ($build <> $data['Build']['buildNumber']) {
        $site_wrapper->title = $data['site_id'];
        $site_wrapper->field_build_number->set($data['Build']['buildNumber']);
        $site_wrapper->field_module_states->set(serialize($data));
        if (!empty($data['core']['drupal']['version'])) {
          $site_wrapper->field_core_version->set($data['core']['drupal']['version']);
        }
        $site_wrapper->save();
      }
      else {
        $site_wrapper->save();
        return array(
          'status' => 'received',
          'message' => t('Active state maintained.'),
        );
      }
    }
    else {
      $entity_type_name = 'site';
      $bundle_name = 'drupal_site';
      $site = entity_create($entity_type_name, array('type' => $bundle_name));
      $site_wrapper = entity_metadata_wrapper($entity_type_name, $site);
      $site_wrapper->title = $data['site_id'];
      $site_wrapper->field_state->set('1');
      $site_wrapper->field_build_number->set($data['Build']['buildNumber']);
      $site_wrapper->field_module_states->set(serialize($data));
      if (!empty($data['core']['drupal']['version'])) {
        $site_wrapper->field_core_version->set($data['core']['drupal']['version']);
      }
      $site_wrapper->save();
    }

    return array(
      'status' => 'updated',
      'message' => t('Data was updated.'),
    );
  }
  return array(
    'status' => 'error',
    'message' => t('Empty package received.'),
  );
}

/**
 * Implements hook_theme().
 */
function adapt_monitor_theme($existing, $type, $theme, $path) {
  return array(
    'adapt_monitor_info' => array(
      'variables' => array(
        'title' => NULL,
        'status' => NULL,
        'build' => NULL,
        'version' => NULL,
      ),
      'template' => 'adapt-monitor-info',
      'path' => $path . '/tpl',
    ),
    'adapt_monitor_item' => array(
      'variables' => array(
        'name' => NULL,
        'version' => NULL,
      ),
      'template' => 'adapt-monitor-item',
      'path' => $path . '/tpl',
    ),
  );
}
